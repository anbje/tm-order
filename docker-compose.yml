version: '3.8'

services:
  db:
    version: '3.8'

    services:
      db:
        image: postgres:15-alpine
        environment:
          POSTGRES_USER: ${POSTGRES_USER}
          POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
          POSTGRES_DB: ${POSTGRES_DB}
        volumes:
          - postgres_data:/var/lib/postgresql/data
          - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
        healthcheck:
          test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
          interval: 10s
          timeout: 5s
          retries: 5
        networks:
          - tmorder

      api:
        build:
          context: ./api
          dockerfile: Dockerfile
        environment:
          DATABASE_URL: ${DATABASE_URL}
          API_SECRET_KEY: ${API_SECRET_KEY}
          SECRET_CALENDAR_TOKEN: ${SECRET_CALENDAR_TOKEN}
        depends_on:
          db:
            condition: service_healthy
        networks:
          - tmorder
        volumes:
          - ./config:/app/config:ro
          - ./config:/config:ro
        healthcheck:
          test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
          interval: 30s
          timeout: 10s
          retries: 3

      bot:
        build:
          context: ./bot
          dockerfile: Dockerfile
        environment:
          TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
          TELEGRAM_WEBHOOK_URL: ${TELEGRAM_WEBHOOK_URL}
          DATABASE_URL: ${DATABASE_URL}
          API_URL: http://api:8000
        depends_on:
          api:
            condition: service_healthy
        networks:
          - tmorder
        volumes:
          - ./config:/app/config:ro
          - ./config:/config:ro

      web:
        build:
          context: ./web
          dockerfile: Dockerfile
        networks:
          - tmorder

      caddy:
        image: caddy:2-alpine
        ports:
          - "80:80"
          - "443:443"
        volumes:
          - ./Caddyfile:/etc/caddy/Caddyfile
          - caddy_data:/data
          - caddy_config:/config
        depends_on:
          - api
          - web
        networks:
          - tmorder

    networks:
      tmorder:
        driver: bridge

    volumes:
      postgres_data:
      caddy_data:
      caddy_config:
